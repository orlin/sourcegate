// Generated by CoffeeScript 1.9.1
var base, fs, merge, path, read, write;

require("source-map-support").install();

merge = require("lodash.merge");

path = require("path");

fs = require("fs");

base = function(root, relative) {
  if (relative == null) {
    relative = true;
  }
  if (relative && (root != null)) {
    return path.join(process.cwd(), root);
  } else {
    return root || process.cwd();
  }
};

read = function(sources, opts) {
  var e, i, len, objects, root, source, what;
  root = base(opts.root, opts.relative);
  objects = [];
  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    if (typeof source === "object") {
      objects.push(source);
    } else if (typeof source === "string") {
      what = path.join(root, path.normalize(source));
      try {
        if (/\.js$/.test(what)) {
          objects.push(require(what));
        } else {
          objects.push(JSON.parse(fs.readFileSync(what)));
        }
      } catch (_error) {
        e = _error;
        console.error(e);
      }
    }
  }
  return objects;
};

write = function(data, opts) {
  var where;
  where = path.join(base(opts.root, opts.relative), path.normalize(opts.path));
  fs.writeFileSync(where, JSON.stringify(data, null, 2) + "\n", opts.options);
  return data;
};

module.exports = function(sources, opts) {
  var base1, base2, data, objects, ref;
  if (sources == null) {
    sources = [];
  }
  if (opts == null) {
    opts = {};
  }
  data = {};
  if (sources.length > 0) {
    objects = read(sources, opts);
    if (objects.length === 1) {
      data = objects[0];
    } else {
      if (opts.merge == null) {
        opts.merge = true;
      }
      if (opts.merge) {
        objects.unshift({});
        data = merge.apply(null, objects);
      } else {
        data = objects;
      }
    }
  }
  if (((ref = opts.write) != null ? ref.path : void 0) != null) {
    if ((base1 = opts.write).root == null) {
      base1.root = opts.root;
    }
    if ((base2 = opts.write).relative == null) {
      base2.relative = opts.relative;
    }
    return write(data, opts.write);
  } else {
    return data;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLGtDQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLEtBRUEsR0FBUSxPQUFBLENBQVEsY0FBUixDQUZSLENBQUE7O0FBQUEsSUFHQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBSFAsQ0FBQTs7QUFBQSxFQUlBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FKTCxDQUFBOztBQUFBLElBTUEsR0FBTyxTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7O0lBQ0wsV0FBWTtHQUFaO0FBQ0EsRUFBQSxJQUFHLFFBQUEsSUFBYSxjQUFoQjtXQUNFLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQUFWLEVBQXlCLElBQXpCLEVBREY7R0FBQSxNQUFBO1dBR0UsSUFBQSxJQUFRLE9BQU8sQ0FBQyxHQUFSLENBQUEsRUFIVjtHQUZLO0FBQUEsQ0FOUCxDQUFBOztBQUFBLElBYUEsR0FBTyxTQUFDLE9BQUQsRUFBVSxJQUFWLEdBQUE7QUFDTCxNQUFBLHNDQUFBO0FBQUEsRUFBQSxJQUFBLEdBQU8sSUFBQSxDQUFLLElBQUksQ0FBQyxJQUFWLEVBQWdCLElBQUksQ0FBQyxRQUFyQixDQUFQLENBQUE7QUFBQSxFQUNBLE9BQUEsR0FBVSxFQURWLENBQUE7QUFFQSxPQUFBLHlDQUFBO3dCQUFBO0FBQ0UsSUFBQSxJQUFHLE1BQUEsQ0FBQSxNQUFBLEtBQWlCLFFBQXBCO0FBQ0UsTUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLE1BQWIsQ0FBQSxDQURGO0tBQUEsTUFFSyxJQUFHLE1BQUEsQ0FBQSxNQUFBLEtBQWlCLFFBQXBCO0FBQ0gsTUFBQSxJQUFBLEdBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLEVBQWdCLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUFoQixDQUFQLENBQUE7QUFDQTtBQUNFLFFBQUEsSUFBRyxPQUFPLENBQUMsSUFBUixDQUFhLElBQWIsQ0FBSDtBQUNFLFVBQUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFBLENBQVEsSUFBUixDQUFiLENBQUEsQ0FERjtTQUFBLE1BQUE7QUFHRSxVQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxFQUFFLENBQUMsWUFBSCxDQUFnQixJQUFoQixDQUFYLENBQWIsQ0FBQSxDQUhGO1NBREY7T0FBQSxjQUFBO0FBTUUsUUFESSxVQUNKLENBQUE7QUFBQSxRQUFBLE9BQU8sQ0FBQyxLQUFSLENBQWMsQ0FBZCxDQUFBLENBTkY7T0FGRztLQUhQO0FBQUEsR0FGQTtTQWNBLFFBZks7QUFBQSxDQWJQLENBQUE7O0FBQUEsS0E4QkEsR0FBUSxTQUFDLElBQUQsRUFBTyxJQUFQLEdBQUE7QUFDTixNQUFBLEtBQUE7QUFBQSxFQUFBLEtBQUEsR0FBUSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUEsQ0FBSyxJQUFJLENBQUMsSUFBVixFQUFnQixJQUFJLENBQUMsUUFBckIsQ0FBVixFQUEwQyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQUksQ0FBQyxJQUFwQixDQUExQyxDQUFSLENBQUE7QUFBQSxFQUNBLEVBQUUsQ0FBQyxhQUFILENBQWlCLEtBQWpCLEVBQXdCLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixFQUFxQixJQUFyQixFQUEyQixDQUEzQixDQUFBLEdBQWdDLElBQXhELEVBQThELElBQUksQ0FBQyxPQUFuRSxDQURBLENBQUE7U0FFQSxLQUhNO0FBQUEsQ0E5QlIsQ0FBQTs7QUFBQSxNQW9DTSxDQUFDLE9BQVAsR0FBaUIsU0FBQyxPQUFELEVBQWUsSUFBZixHQUFBO0FBQ2YsTUFBQSxnQ0FBQTs7SUFEZ0IsVUFBVTtHQUMxQjs7SUFEOEIsT0FBTztHQUNyQztBQUFBLEVBQUEsSUFBQSxHQUFPLEVBQVAsQ0FBQTtBQUVBLEVBQUEsSUFBRyxPQUFPLENBQUMsTUFBUixHQUFpQixDQUFwQjtBQUNFLElBQUEsT0FBQSxHQUFVLElBQUEsQ0FBSyxPQUFMLEVBQWMsSUFBZCxDQUFWLENBQUE7QUFDQSxJQUFBLElBQUcsT0FBTyxDQUFDLE1BQVIsS0FBa0IsQ0FBckI7QUFDRSxNQUFBLElBQUEsR0FBTyxPQUFRLENBQUEsQ0FBQSxDQUFmLENBREY7S0FBQSxNQUFBOztRQUdFLElBQUksQ0FBQyxRQUFTO09BQWQ7QUFDQSxNQUFBLElBQUcsSUFBSSxDQUFDLEtBQVI7QUFFRSxRQUFBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLEVBQWhCLENBQUEsQ0FBQTtBQUFBLFFBQ0EsSUFBQSxHQUFPLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBWixFQUFrQixPQUFsQixDQURQLENBRkY7T0FBQSxNQUFBO0FBS0UsUUFBQSxJQUFBLEdBQU8sT0FBUCxDQUxGO09BSkY7S0FGRjtHQUZBO0FBZUEsRUFBQSxJQUFHLHdEQUFIOztXQUNZLENBQUMsT0FBUSxJQUFJLENBQUM7S0FBeEI7O1dBQ1UsQ0FBQyxXQUFZLElBQUksQ0FBQztLQUQ1QjtXQUVBLEtBQUEsQ0FBTSxJQUFOLEVBQVksSUFBSSxDQUFDLEtBQWpCLEVBSEY7R0FBQSxNQUFBO1dBS0UsS0FMRjtHQWhCZTtBQUFBLENBcENqQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKClcblxubWVyZ2UgPSByZXF1aXJlKFwibG9kYXNoLm1lcmdlXCIpXG5wYXRoID0gcmVxdWlyZShcInBhdGhcIilcbmZzID0gcmVxdWlyZShcImZzXCIpXG5cbmJhc2UgPSAocm9vdCwgcmVsYXRpdmUpIC0+XG4gIHJlbGF0aXZlID89IHRydWVcbiAgaWYgcmVsYXRpdmUgYW5kIHJvb3Q/XG4gICAgcGF0aC5qb2luIHByb2Nlc3MuY3dkKCksIHJvb3RcbiAgZWxzZVxuICAgIHJvb3QgfHwgcHJvY2Vzcy5jd2QoKVxuXG5yZWFkID0gKHNvdXJjZXMsIG9wdHMpIC0+XG4gIHJvb3QgPSBiYXNlIG9wdHMucm9vdCwgb3B0cy5yZWxhdGl2ZVxuICBvYmplY3RzID0gW11cbiAgZm9yIHNvdXJjZSBpbiBzb3VyY2VzXG4gICAgaWYgdHlwZW9mIHNvdXJjZSBpcyBcIm9iamVjdFwiXG4gICAgICBvYmplY3RzLnB1c2ggc291cmNlXG4gICAgZWxzZSBpZiB0eXBlb2Ygc291cmNlIGlzIFwic3RyaW5nXCJcbiAgICAgIHdoYXQgPSBwYXRoLmpvaW4ocm9vdCwgcGF0aC5ub3JtYWxpemUoc291cmNlKSlcbiAgICAgIHRyeVxuICAgICAgICBpZiAvXFwuanMkLy50ZXN0KHdoYXQpXG4gICAgICAgICAgb2JqZWN0cy5wdXNoIHJlcXVpcmUod2hhdClcbiAgICAgICAgZWxzZVxuICAgICAgICAgIG9iamVjdHMucHVzaCBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyh3aGF0KSlcbiAgICAgIGNhdGNoIGVcbiAgICAgICAgY29uc29sZS5lcnJvciBlXG4gIG9iamVjdHNcblxud3JpdGUgPSAoZGF0YSwgb3B0cykgLT5cbiAgd2hlcmUgPSBwYXRoLmpvaW4oYmFzZShvcHRzLnJvb3QsIG9wdHMucmVsYXRpdmUpLCBwYXRoLm5vcm1hbGl6ZShvcHRzLnBhdGgpKVxuICBmcy53cml0ZUZpbGVTeW5jIHdoZXJlLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSArIFwiXFxuXCIsIG9wdHMub3B0aW9uc1xuICBkYXRhXG5cblxubW9kdWxlLmV4cG9ydHMgPSAoc291cmNlcyA9IFtdLCBvcHRzID0ge30pIC0+XG4gIGRhdGEgPSB7fVxuXG4gIGlmIHNvdXJjZXMubGVuZ3RoID4gMFxuICAgIG9iamVjdHMgPSByZWFkIHNvdXJjZXMsIG9wdHNcbiAgICBpZiBvYmplY3RzLmxlbmd0aCBpcyAxXG4gICAgICBkYXRhID0gb2JqZWN0c1swXVxuICAgIGVsc2VcbiAgICAgIG9wdHMubWVyZ2UgPz0gdHJ1ZVxuICAgICAgaWYgb3B0cy5tZXJnZVxuICAgICAgICAjIG1lcmdlIG11dGF0ZXMgdGhlIGZpcnN0IG9iamVjdFxuICAgICAgICBvYmplY3RzLnVuc2hpZnQge31cbiAgICAgICAgZGF0YSA9IG1lcmdlLmFwcGx5IG51bGwsIG9iamVjdHNcbiAgICAgIGVsc2VcbiAgICAgICAgZGF0YSA9IG9iamVjdHNcblxuICBpZiBvcHRzLndyaXRlPy5wYXRoP1xuICAgIG9wdHMud3JpdGUucm9vdCA/PSBvcHRzLnJvb3RcbiAgICBvcHRzLndyaXRlLnJlbGF0aXZlID89IG9wdHMucmVsYXRpdmVcbiAgICB3cml0ZSBkYXRhLCBvcHRzLndyaXRlXG4gIGVsc2VcbiAgICBkYXRhXG4iXX0=