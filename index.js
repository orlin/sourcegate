// Generated by CoffeeScript 1.9.1
var base, fs, isThere, merge, nocomments, path, read, write;

require("source-map-support").install();

merge = require("lodash.merge");

path = require("path");

fs = require("fs");

isThere = require("is-there");

nocomments = require("strip-json-comments");

base = function(root, relative) {
  if (relative == null) {
    relative = true;
  }
  if (relative && (root != null)) {
    return path.join(process.cwd(), root);
  } else {
    return root || process.cwd();
  }
};

read = function(sources, opts) {
  var e, i, len, objects, root, source, what;
  root = base(opts.root, opts.relative);
  objects = [];
  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    if (typeof source === "object") {
      objects.push(source);
    } else if (typeof source === "string") {
      what = path.join(root, path.normalize(source));
      try {
        if (isThere(what)) {
          if (/\.js$/.test(what)) {
            objects.push(require(what));
          } else {
            objects.push(JSON.parse(nocomments(fs.readFileSync(what).toString())));
          }
        }
      } catch (_error) {
        e = _error;
        console.error(e);
      }
    }
  }
  return objects;
};

write = function(data, opts) {
  var where;
  where = path.join(base(opts.root, opts.relative), path.normalize(opts.path));
  fs.writeFileSync(where, JSON.stringify(data, null, 2) + "\n", opts.options);
  return data;
};

module.exports = function(sources, opts) {
  var base1, base2, data, objects, ref;
  if (sources == null) {
    sources = [];
  }
  if (opts == null) {
    opts = {};
  }
  data = {};
  if (sources.length > 0) {
    objects = read(sources, opts);
    if (objects.length === 1) {
      data = objects[0];
    } else {
      if (opts.merge == null) {
        opts.merge = true;
      }
      if (opts.merge) {
        objects.unshift({});
        data = merge.apply(null, objects);
      } else {
        data = objects;
      }
    }
  }
  if (((ref = opts.write) != null ? ref.path : void 0) != null) {
    if ((base1 = opts.write).root == null) {
      base1.root = opts.root;
    }
    if ((base2 = opts.write).relative == null) {
      base2.relative = opts.relative;
    }
    return write(data, opts.write);
  } else {
    return data;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLHVEQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLEtBRUEsR0FBUSxPQUFBLENBQVEsY0FBUixDQUZSLENBQUE7O0FBQUEsSUFHQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBSFAsQ0FBQTs7QUFBQSxFQUlBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FKTCxDQUFBOztBQUFBLE9BS0EsR0FBVSxPQUFBLENBQVEsVUFBUixDQUxWLENBQUE7O0FBQUEsVUFNQSxHQUFhLE9BQUEsQ0FBUSxxQkFBUixDQU5iLENBQUE7O0FBQUEsSUFRQSxHQUFPLFNBQUMsSUFBRCxFQUFPLFFBQVAsR0FBQTs7SUFDTCxXQUFZO0dBQVo7QUFDQSxFQUFBLElBQUcsUUFBQSxJQUFhLGNBQWhCO1dBQ0UsSUFBSSxDQUFDLElBQUwsQ0FBVSxPQUFPLENBQUMsR0FBUixDQUFBLENBQVYsRUFBeUIsSUFBekIsRUFERjtHQUFBLE1BQUE7V0FHRSxJQUFBLElBQVEsT0FBTyxDQUFDLEdBQVIsQ0FBQSxFQUhWO0dBRks7QUFBQSxDQVJQLENBQUE7O0FBQUEsSUFlQSxHQUFPLFNBQUMsT0FBRCxFQUFVLElBQVYsR0FBQTtBQUNMLE1BQUEsc0NBQUE7QUFBQSxFQUFBLElBQUEsR0FBTyxJQUFBLENBQUssSUFBSSxDQUFDLElBQVYsRUFBZ0IsSUFBSSxDQUFDLFFBQXJCLENBQVAsQ0FBQTtBQUFBLEVBQ0EsT0FBQSxHQUFVLEVBRFYsQ0FBQTtBQUVBLE9BQUEseUNBQUE7d0JBQUE7QUFDRSxJQUFBLElBQUcsTUFBQSxDQUFBLE1BQUEsS0FBaUIsUUFBcEI7QUFDRSxNQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsTUFBYixDQUFBLENBREY7S0FBQSxNQUVLLElBQUcsTUFBQSxDQUFBLE1BQUEsS0FBaUIsUUFBcEI7QUFDSCxNQUFBLElBQUEsR0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLElBQVYsRUFBZ0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxNQUFmLENBQWhCLENBQVAsQ0FBQTtBQUNBO0FBQ0UsUUFBQSxJQUFHLE9BQUEsQ0FBUSxJQUFSLENBQUg7QUFDRSxVQUFBLElBQUcsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFiLENBQUg7QUFDRSxZQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsT0FBQSxDQUFRLElBQVIsQ0FBYixDQUFBLENBREY7V0FBQSxNQUFBO0FBR0UsWUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLElBQUksQ0FBQyxLQUFMLENBQVcsVUFBQSxDQUFXLEVBQUUsQ0FBQyxZQUFILENBQWdCLElBQWhCLENBQXFCLENBQUMsUUFBdEIsQ0FBQSxDQUFYLENBQVgsQ0FBYixDQUFBLENBSEY7V0FERjtTQURGO09BQUEsY0FBQTtBQU9FLFFBREksVUFDSixDQUFBO0FBQUEsUUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLENBQWQsQ0FBQSxDQVBGO09BRkc7S0FIUDtBQUFBLEdBRkE7U0FlQSxRQWhCSztBQUFBLENBZlAsQ0FBQTs7QUFBQSxLQWlDQSxHQUFRLFNBQUMsSUFBRCxFQUFPLElBQVAsR0FBQTtBQUNOLE1BQUEsS0FBQTtBQUFBLEVBQUEsS0FBQSxHQUFRLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQSxDQUFLLElBQUksQ0FBQyxJQUFWLEVBQWdCLElBQUksQ0FBQyxRQUFyQixDQUFWLEVBQTBDLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBSSxDQUFDLElBQXBCLENBQTFDLENBQVIsQ0FBQTtBQUFBLEVBQ0EsRUFBRSxDQUFDLGFBQUgsQ0FBaUIsS0FBakIsRUFBd0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFmLEVBQXFCLElBQXJCLEVBQTJCLENBQTNCLENBQUEsR0FBZ0MsSUFBeEQsRUFBOEQsSUFBSSxDQUFDLE9BQW5FLENBREEsQ0FBQTtTQUVBLEtBSE07QUFBQSxDQWpDUixDQUFBOztBQUFBLE1BdUNNLENBQUMsT0FBUCxHQUFpQixTQUFDLE9BQUQsRUFBZSxJQUFmLEdBQUE7QUFDZixNQUFBLGdDQUFBOztJQURnQixVQUFVO0dBQzFCOztJQUQ4QixPQUFPO0dBQ3JDO0FBQUEsRUFBQSxJQUFBLEdBQU8sRUFBUCxDQUFBO0FBRUEsRUFBQSxJQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQXBCO0FBQ0UsSUFBQSxPQUFBLEdBQVUsSUFBQSxDQUFLLE9BQUwsRUFBYyxJQUFkLENBQVYsQ0FBQTtBQUNBLElBQUEsSUFBRyxPQUFPLENBQUMsTUFBUixLQUFrQixDQUFyQjtBQUNFLE1BQUEsSUFBQSxHQUFPLE9BQVEsQ0FBQSxDQUFBLENBQWYsQ0FERjtLQUFBLE1BQUE7O1FBR0UsSUFBSSxDQUFDLFFBQVM7T0FBZDtBQUNBLE1BQUEsSUFBRyxJQUFJLENBQUMsS0FBUjtBQUVFLFFBQUEsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBQSxDQUFBO0FBQUEsUUFDQSxJQUFBLEdBQU8sS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFaLEVBQWtCLE9BQWxCLENBRFAsQ0FGRjtPQUFBLE1BQUE7QUFLRSxRQUFBLElBQUEsR0FBTyxPQUFQLENBTEY7T0FKRjtLQUZGO0dBRkE7QUFlQSxFQUFBLElBQUcsd0RBQUg7O1dBQ1ksQ0FBQyxPQUFRLElBQUksQ0FBQztLQUF4Qjs7V0FDVSxDQUFDLFdBQVksSUFBSSxDQUFDO0tBRDVCO1dBRUEsS0FBQSxDQUFNLElBQU4sRUFBWSxJQUFJLENBQUMsS0FBakIsRUFIRjtHQUFBLE1BQUE7V0FLRSxLQUxGO0dBaEJlO0FBQUEsQ0F2Q2pCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLmluc3RhbGwoKVxuXG5tZXJnZSA9IHJlcXVpcmUoXCJsb2Rhc2gubWVyZ2VcIilcbnBhdGggPSByZXF1aXJlKFwicGF0aFwiKVxuZnMgPSByZXF1aXJlKFwiZnNcIilcbmlzVGhlcmUgPSByZXF1aXJlKFwiaXMtdGhlcmVcIilcbm5vY29tbWVudHMgPSByZXF1aXJlKFwic3RyaXAtanNvbi1jb21tZW50c1wiKVxuXG5iYXNlID0gKHJvb3QsIHJlbGF0aXZlKSAtPlxuICByZWxhdGl2ZSA/PSB0cnVlXG4gIGlmIHJlbGF0aXZlIGFuZCByb290P1xuICAgIHBhdGguam9pbiBwcm9jZXNzLmN3ZCgpLCByb290XG4gIGVsc2VcbiAgICByb290IHx8IHByb2Nlc3MuY3dkKClcblxucmVhZCA9IChzb3VyY2VzLCBvcHRzKSAtPlxuICByb290ID0gYmFzZSBvcHRzLnJvb3QsIG9wdHMucmVsYXRpdmVcbiAgb2JqZWN0cyA9IFtdXG4gIGZvciBzb3VyY2UgaW4gc291cmNlc1xuICAgIGlmIHR5cGVvZiBzb3VyY2UgaXMgXCJvYmplY3RcIlxuICAgICAgb2JqZWN0cy5wdXNoIHNvdXJjZVxuICAgIGVsc2UgaWYgdHlwZW9mIHNvdXJjZSBpcyBcInN0cmluZ1wiXG4gICAgICB3aGF0ID0gcGF0aC5qb2luKHJvb3QsIHBhdGgubm9ybWFsaXplKHNvdXJjZSkpXG4gICAgICB0cnlcbiAgICAgICAgaWYgaXNUaGVyZSB3aGF0XG4gICAgICAgICAgaWYgL1xcLmpzJC8udGVzdCh3aGF0KVxuICAgICAgICAgICAgb2JqZWN0cy5wdXNoIHJlcXVpcmUod2hhdClcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBvYmplY3RzLnB1c2ggSlNPTi5wYXJzZShub2NvbW1lbnRzKGZzLnJlYWRGaWxlU3luYyh3aGF0KS50b1N0cmluZygpKSlcbiAgICAgIGNhdGNoIGVcbiAgICAgICAgY29uc29sZS5lcnJvciBlXG4gIG9iamVjdHNcblxud3JpdGUgPSAoZGF0YSwgb3B0cykgLT5cbiAgd2hlcmUgPSBwYXRoLmpvaW4oYmFzZShvcHRzLnJvb3QsIG9wdHMucmVsYXRpdmUpLCBwYXRoLm5vcm1hbGl6ZShvcHRzLnBhdGgpKVxuICBmcy53cml0ZUZpbGVTeW5jIHdoZXJlLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSArIFwiXFxuXCIsIG9wdHMub3B0aW9uc1xuICBkYXRhXG5cblxubW9kdWxlLmV4cG9ydHMgPSAoc291cmNlcyA9IFtdLCBvcHRzID0ge30pIC0+XG4gIGRhdGEgPSB7fVxuXG4gIGlmIHNvdXJjZXMubGVuZ3RoID4gMFxuICAgIG9iamVjdHMgPSByZWFkIHNvdXJjZXMsIG9wdHNcbiAgICBpZiBvYmplY3RzLmxlbmd0aCBpcyAxXG4gICAgICBkYXRhID0gb2JqZWN0c1swXVxuICAgIGVsc2VcbiAgICAgIG9wdHMubWVyZ2UgPz0gdHJ1ZVxuICAgICAgaWYgb3B0cy5tZXJnZVxuICAgICAgICAjIG1lcmdlIG11dGF0ZXMgdGhlIGZpcnN0IG9iamVjdFxuICAgICAgICBvYmplY3RzLnVuc2hpZnQge31cbiAgICAgICAgZGF0YSA9IG1lcmdlLmFwcGx5IG51bGwsIG9iamVjdHNcbiAgICAgIGVsc2VcbiAgICAgICAgZGF0YSA9IG9iamVjdHNcblxuICBpZiBvcHRzLndyaXRlPy5wYXRoP1xuICAgIG9wdHMud3JpdGUucm9vdCA/PSBvcHRzLnJvb3RcbiAgICBvcHRzLndyaXRlLnJlbGF0aXZlID89IG9wdHMucmVsYXRpdmVcbiAgICB3cml0ZSBkYXRhLCBvcHRzLndyaXRlXG4gIGVsc2VcbiAgICBkYXRhXG4iXX0=