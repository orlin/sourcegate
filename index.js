// Generated by CoffeeScript 1.9.1
var base, fs, merge, path, read, write;

require("source-map-support").install();

merge = require("lodash.merge");

path = require("path");

fs = require("fs");

base = function(root, relative) {
  if (relative == null) {
    relative = true;
  }
  if (relative && (root != null)) {
    return path.join(process.cwd(), root);
  } else {
    return root || process.cwd();
  }
};

read = function(sources, opts) {
  var i, len, objects, root, source;
  root = base(opts.root, opts.relative);
  objects = [];
  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    if (typeof source === "object") {
      objects.push(source);
    } else if (typeof source === "string") {
      objects.push(require(path.join(root, path.normalize(source))));
    }
  }
  return objects;
};

write = function(data, opts) {
  var where;
  where = path.join(base(opts.root, opts.relative), path.normalize(opts.path));
  fs.writeFileSync(where, JSON.stringify(data, null, 2), opts.options);
  return data;
};

module.exports = function(sources, opts) {
  var base1, base2, data, objects, ref;
  if (sources == null) {
    sources = [];
  }
  if (opts == null) {
    opts = {};
  }
  data = {};
  if (sources.length > 0) {
    objects = read(sources, opts);
    if (objects.length === 1) {
      data = objects[0];
    } else {
      if (opts.merge == null) {
        opts.merge = true;
      }
      if (opts.merge) {
        objects.unshift({});
        data = merge.apply(null, objects);
      } else {
        data = objects;
      }
    }
  }
  if (((ref = opts.write) != null ? ref.path : void 0) != null) {
    if ((base1 = opts.write).root == null) {
      base1.root = opts.root;
    }
    if ((base2 = opts.write).relative == null) {
      base2.relative = opts.relative;
    }
    return write(data, opts.write);
  } else {
    return data;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLGtDQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLEtBRUEsR0FBUSxPQUFBLENBQVEsY0FBUixDQUZSLENBQUE7O0FBQUEsSUFHQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBSFAsQ0FBQTs7QUFBQSxFQUlBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FKTCxDQUFBOztBQUFBLElBTUEsR0FBTyxTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7O0lBQ0wsV0FBWTtHQUFaO0FBQ0EsRUFBQSxJQUFHLFFBQUEsSUFBYSxjQUFoQjtXQUNFLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQUFWLEVBQXlCLElBQXpCLEVBREY7R0FBQSxNQUFBO1dBR0UsSUFBQSxJQUFRLE9BQU8sQ0FBQyxHQUFSLENBQUEsRUFIVjtHQUZLO0FBQUEsQ0FOUCxDQUFBOztBQUFBLElBYUEsR0FBTyxTQUFDLE9BQUQsRUFBVSxJQUFWLEdBQUE7QUFDTCxNQUFBLDZCQUFBO0FBQUEsRUFBQSxJQUFBLEdBQU8sSUFBQSxDQUFLLElBQUksQ0FBQyxJQUFWLEVBQWdCLElBQUksQ0FBQyxRQUFyQixDQUFQLENBQUE7QUFBQSxFQUNBLE9BQUEsR0FBVSxFQURWLENBQUE7QUFFQSxPQUFBLHlDQUFBO3dCQUFBO0FBQ0UsSUFBQSxJQUFHLE1BQUEsQ0FBQSxNQUFBLEtBQWlCLFFBQXBCO0FBQ0UsTUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLE1BQWIsQ0FBQSxDQURGO0tBQUEsTUFFSyxJQUFHLE1BQUEsQ0FBQSxNQUFBLEtBQWlCLFFBQXBCO0FBQ0gsTUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLE9BQUEsQ0FBUSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQVYsRUFBZ0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxNQUFmLENBQWhCLENBQVIsQ0FBYixDQUFBLENBREc7S0FIUDtBQUFBLEdBRkE7U0FPQSxRQVJLO0FBQUEsQ0FiUCxDQUFBOztBQUFBLEtBdUJBLEdBQVEsU0FBQyxJQUFELEVBQU8sSUFBUCxHQUFBO0FBQ04sTUFBQSxLQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFBLENBQUssSUFBSSxDQUFDLElBQVYsRUFBZ0IsSUFBSSxDQUFDLFFBQXJCLENBQVYsRUFBMEMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFJLENBQUMsSUFBcEIsQ0FBMUMsQ0FBUixDQUFBO0FBQUEsRUFDQSxFQUFFLENBQUMsYUFBSCxDQUFpQixLQUFqQixFQUF3QixJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsRUFBcUIsSUFBckIsRUFBMkIsQ0FBM0IsQ0FBeEIsRUFBdUQsSUFBSSxDQUFDLE9BQTVELENBREEsQ0FBQTtTQUVBLEtBSE07QUFBQSxDQXZCUixDQUFBOztBQUFBLE1BNkJNLENBQUMsT0FBUCxHQUFpQixTQUFDLE9BQUQsRUFBZSxJQUFmLEdBQUE7QUFDZixNQUFBLGdDQUFBOztJQURnQixVQUFVO0dBQzFCOztJQUQ4QixPQUFPO0dBQ3JDO0FBQUEsRUFBQSxJQUFBLEdBQU8sRUFBUCxDQUFBO0FBRUEsRUFBQSxJQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQXBCO0FBQ0UsSUFBQSxPQUFBLEdBQVUsSUFBQSxDQUFLLE9BQUwsRUFBYyxJQUFkLENBQVYsQ0FBQTtBQUNBLElBQUEsSUFBRyxPQUFPLENBQUMsTUFBUixLQUFrQixDQUFyQjtBQUNFLE1BQUEsSUFBQSxHQUFPLE9BQVEsQ0FBQSxDQUFBLENBQWYsQ0FERjtLQUFBLE1BQUE7O1FBR0UsSUFBSSxDQUFDLFFBQVM7T0FBZDtBQUNBLE1BQUEsSUFBRyxJQUFJLENBQUMsS0FBUjtBQUVFLFFBQUEsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsRUFBaEIsQ0FBQSxDQUFBO0FBQUEsUUFDQSxJQUFBLEdBQU8sS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFaLEVBQWtCLE9BQWxCLENBRFAsQ0FGRjtPQUFBLE1BQUE7QUFLRSxRQUFBLElBQUEsR0FBTyxPQUFQLENBTEY7T0FKRjtLQUZGO0dBRkE7QUFlQSxFQUFBLElBQUcsd0RBQUg7O1dBQ1ksQ0FBQyxPQUFRLElBQUksQ0FBQztLQUF4Qjs7V0FDVSxDQUFDLFdBQVksSUFBSSxDQUFDO0tBRDVCO1dBRUEsS0FBQSxDQUFNLElBQU4sRUFBWSxJQUFJLENBQUMsS0FBakIsRUFIRjtHQUFBLE1BQUE7V0FLRSxLQUxGO0dBaEJlO0FBQUEsQ0E3QmpCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLmluc3RhbGwoKVxuXG5tZXJnZSA9IHJlcXVpcmUoXCJsb2Rhc2gubWVyZ2VcIilcbnBhdGggPSByZXF1aXJlKFwicGF0aFwiKVxuZnMgPSByZXF1aXJlKFwiZnNcIilcblxuYmFzZSA9IChyb290LCByZWxhdGl2ZSkgLT5cbiAgcmVsYXRpdmUgPz0gdHJ1ZVxuICBpZiByZWxhdGl2ZSBhbmQgcm9vdD9cbiAgICBwYXRoLmpvaW4gcHJvY2Vzcy5jd2QoKSwgcm9vdFxuICBlbHNlXG4gICAgcm9vdCB8fCBwcm9jZXNzLmN3ZCgpXG5cbnJlYWQgPSAoc291cmNlcywgb3B0cykgLT5cbiAgcm9vdCA9IGJhc2Ugb3B0cy5yb290LCBvcHRzLnJlbGF0aXZlXG4gIG9iamVjdHMgPSBbXVxuICBmb3Igc291cmNlIGluIHNvdXJjZXNcbiAgICBpZiB0eXBlb2Ygc291cmNlIGlzIFwib2JqZWN0XCJcbiAgICAgIG9iamVjdHMucHVzaCBzb3VyY2VcbiAgICBlbHNlIGlmIHR5cGVvZiBzb3VyY2UgaXMgXCJzdHJpbmdcIlxuICAgICAgb2JqZWN0cy5wdXNoIHJlcXVpcmUocGF0aC5qb2luKHJvb3QsIHBhdGgubm9ybWFsaXplKHNvdXJjZSkpKVxuICBvYmplY3RzXG5cbndyaXRlID0gKGRhdGEsIG9wdHMpIC0+XG4gIHdoZXJlID0gcGF0aC5qb2luKGJhc2Uob3B0cy5yb290LCBvcHRzLnJlbGF0aXZlKSwgcGF0aC5ub3JtYWxpemUob3B0cy5wYXRoKSlcbiAgZnMud3JpdGVGaWxlU3luYyB3aGVyZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMiksIG9wdHMub3B0aW9uc1xuICBkYXRhXG5cblxubW9kdWxlLmV4cG9ydHMgPSAoc291cmNlcyA9IFtdLCBvcHRzID0ge30pIC0+XG4gIGRhdGEgPSB7fVxuXG4gIGlmIHNvdXJjZXMubGVuZ3RoID4gMFxuICAgIG9iamVjdHMgPSByZWFkIHNvdXJjZXMsIG9wdHNcbiAgICBpZiBvYmplY3RzLmxlbmd0aCBpcyAxXG4gICAgICBkYXRhID0gb2JqZWN0c1swXVxuICAgIGVsc2VcbiAgICAgIG9wdHMubWVyZ2UgPz0gdHJ1ZVxuICAgICAgaWYgb3B0cy5tZXJnZVxuICAgICAgICAjIG1lcmdlIG11dGF0ZXMgdGhlIGZpcnN0IG9iamVjdFxuICAgICAgICBvYmplY3RzLnVuc2hpZnQge31cbiAgICAgICAgZGF0YSA9IG1lcmdlLmFwcGx5IG51bGwsIG9iamVjdHNcbiAgICAgIGVsc2VcbiAgICAgICAgZGF0YSA9IG9iamVjdHNcblxuICBpZiBvcHRzLndyaXRlPy5wYXRoP1xuICAgIG9wdHMud3JpdGUucm9vdCA/PSBvcHRzLnJvb3RcbiAgICBvcHRzLndyaXRlLnJlbGF0aXZlID89IG9wdHMucmVsYXRpdmVcbiAgICB3cml0ZSBkYXRhLCBvcHRzLndyaXRlXG4gIGVsc2VcbiAgICBkYXRhXG4iXX0=