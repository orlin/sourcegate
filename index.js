// Generated by CoffeeScript 1.9.1
var base, fs, merge, path, read, write;

require("source-map-support").install();

merge = require("lodash.merge");

path = require("path");

fs = require("fs");

base = function(root, relative) {
  if (relative == null) {
    relative = true;
  }
  if (relative && (root != null)) {
    return path.join(process.cwd(), root);
  } else {
    return root || process.cwd();
  }
};

read = function(sources, opts) {
  var e, i, len, objects, root, source, what;
  root = base(opts.root, opts.relative);
  objects = [];
  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];
    if (typeof source === "object") {
      objects.push(source);
    } else if (typeof source === "string") {
      what = path.join(root, path.normalize(source));
      try {
        if (/\.js$/.test(what) || /\.json$/.test(what)) {
          objects.push(require(what));
        } else {
          objects.push(JSON.parse(fs.readFileSync(what)));
        }
      } catch (_error) {
        e = _error;
        console.error(e);
      }
    }
  }
  return objects;
};

write = function(data, opts) {
  var where;
  where = path.join(base(opts.root, opts.relative), path.normalize(opts.path));
  fs.writeFileSync(where, JSON.stringify(data, null, 2) + "\n", opts.options);
  return data;
};

module.exports = function(sources, opts) {
  var base1, base2, data, objects, ref;
  if (sources == null) {
    sources = [];
  }
  if (opts == null) {
    opts = {};
  }
  data = {};
  if (sources.length > 0) {
    objects = read(sources, opts);
    if (objects.length === 1) {
      data = objects[0];
    } else {
      if (opts.merge == null) {
        opts.merge = true;
      }
      if (opts.merge) {
        objects.unshift({});
        data = merge.apply(null, objects);
      } else {
        data = objects;
      }
    }
  }
  if (((ref = opts.write) != null ? ref.path : void 0) != null) {
    if ((base1 = opts.write).root == null) {
      base1.root = opts.root;
    }
    if ((base2 = opts.write).relative == null) {
      base2.relative = opts.relative;
    }
    return write(data, opts.write);
  } else {
    return data;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLGtDQUFBOztBQUFBLE9BQUEsQ0FBUSxvQkFBUixDQUE2QixDQUFDLE9BQTlCLENBQUEsQ0FBQSxDQUFBOztBQUFBLEtBRUEsR0FBUSxPQUFBLENBQVEsY0FBUixDQUZSLENBQUE7O0FBQUEsSUFHQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBSFAsQ0FBQTs7QUFBQSxFQUlBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FKTCxDQUFBOztBQUFBLElBTUEsR0FBTyxTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7O0lBQ0wsV0FBWTtHQUFaO0FBQ0EsRUFBQSxJQUFHLFFBQUEsSUFBYSxjQUFoQjtXQUNFLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQUFWLEVBQXlCLElBQXpCLEVBREY7R0FBQSxNQUFBO1dBR0UsSUFBQSxJQUFRLE9BQU8sQ0FBQyxHQUFSLENBQUEsRUFIVjtHQUZLO0FBQUEsQ0FOUCxDQUFBOztBQUFBLElBYUEsR0FBTyxTQUFDLE9BQUQsRUFBVSxJQUFWLEdBQUE7QUFDTCxNQUFBLHNDQUFBO0FBQUEsRUFBQSxJQUFBLEdBQU8sSUFBQSxDQUFLLElBQUksQ0FBQyxJQUFWLEVBQWdCLElBQUksQ0FBQyxRQUFyQixDQUFQLENBQUE7QUFBQSxFQUNBLE9BQUEsR0FBVSxFQURWLENBQUE7QUFFQSxPQUFBLHlDQUFBO3dCQUFBO0FBQ0UsSUFBQSxJQUFHLE1BQUEsQ0FBQSxNQUFBLEtBQWlCLFFBQXBCO0FBQ0UsTUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLE1BQWIsQ0FBQSxDQURGO0tBQUEsTUFFSyxJQUFHLE1BQUEsQ0FBQSxNQUFBLEtBQWlCLFFBQXBCO0FBQ0gsTUFBQSxJQUFBLEdBQU8sSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLEVBQWdCLElBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUFoQixDQUFQLENBQUE7QUFDQTtBQUNFLFFBQUEsSUFBRyxPQUFPLENBQUMsSUFBUixDQUFhLElBQWIsQ0FBQSxJQUFzQixTQUFTLENBQUMsSUFBVixDQUFlLElBQWYsQ0FBekI7QUFDRSxVQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsT0FBQSxDQUFRLElBQVIsQ0FBYixDQUFBLENBREY7U0FBQSxNQUFBO0FBR0UsVUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLElBQUksQ0FBQyxLQUFMLENBQVcsRUFBRSxDQUFDLFlBQUgsQ0FBZ0IsSUFBaEIsQ0FBWCxDQUFiLENBQUEsQ0FIRjtTQURGO09BQUEsY0FBQTtBQU1FLFFBREksVUFDSixDQUFBO0FBQUEsUUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLENBQWQsQ0FBQSxDQU5GO09BRkc7S0FIUDtBQUFBLEdBRkE7U0FjQSxRQWZLO0FBQUEsQ0FiUCxDQUFBOztBQUFBLEtBOEJBLEdBQVEsU0FBQyxJQUFELEVBQU8sSUFBUCxHQUFBO0FBQ04sTUFBQSxLQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFBLENBQUssSUFBSSxDQUFDLElBQVYsRUFBZ0IsSUFBSSxDQUFDLFFBQXJCLENBQVYsRUFBMEMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFJLENBQUMsSUFBcEIsQ0FBMUMsQ0FBUixDQUFBO0FBQUEsRUFDQSxFQUFFLENBQUMsYUFBSCxDQUFpQixLQUFqQixFQUF3QixJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsRUFBcUIsSUFBckIsRUFBMkIsQ0FBM0IsQ0FBQSxHQUFnQyxJQUF4RCxFQUE4RCxJQUFJLENBQUMsT0FBbkUsQ0FEQSxDQUFBO1NBRUEsS0FITTtBQUFBLENBOUJSLENBQUE7O0FBQUEsTUFvQ00sQ0FBQyxPQUFQLEdBQWlCLFNBQUMsT0FBRCxFQUFlLElBQWYsR0FBQTtBQUNmLE1BQUEsZ0NBQUE7O0lBRGdCLFVBQVU7R0FDMUI7O0lBRDhCLE9BQU87R0FDckM7QUFBQSxFQUFBLElBQUEsR0FBTyxFQUFQLENBQUE7QUFFQSxFQUFBLElBQUcsT0FBTyxDQUFDLE1BQVIsR0FBaUIsQ0FBcEI7QUFDRSxJQUFBLE9BQUEsR0FBVSxJQUFBLENBQUssT0FBTCxFQUFjLElBQWQsQ0FBVixDQUFBO0FBQ0EsSUFBQSxJQUFHLE9BQU8sQ0FBQyxNQUFSLEtBQWtCLENBQXJCO0FBQ0UsTUFBQSxJQUFBLEdBQU8sT0FBUSxDQUFBLENBQUEsQ0FBZixDQURGO0tBQUEsTUFBQTs7UUFHRSxJQUFJLENBQUMsUUFBUztPQUFkO0FBQ0EsTUFBQSxJQUFHLElBQUksQ0FBQyxLQUFSO0FBRUUsUUFBQSxPQUFPLENBQUMsT0FBUixDQUFnQixFQUFoQixDQUFBLENBQUE7QUFBQSxRQUNBLElBQUEsR0FBTyxLQUFLLENBQUMsS0FBTixDQUFZLElBQVosRUFBa0IsT0FBbEIsQ0FEUCxDQUZGO09BQUEsTUFBQTtBQUtFLFFBQUEsSUFBQSxHQUFPLE9BQVAsQ0FMRjtPQUpGO0tBRkY7R0FGQTtBQWVBLEVBQUEsSUFBRyx3REFBSDs7V0FDWSxDQUFDLE9BQVEsSUFBSSxDQUFDO0tBQXhCOztXQUNVLENBQUMsV0FBWSxJQUFJLENBQUM7S0FENUI7V0FFQSxLQUFBLENBQU0sSUFBTixFQUFZLElBQUksQ0FBQyxLQUFqQixFQUhGO0dBQUEsTUFBQTtXQUtFLEtBTEY7R0FoQmU7QUFBQSxDQXBDakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCJzb3VyY2UtbWFwLXN1cHBvcnRcIikuaW5zdGFsbCgpXG5cbm1lcmdlID0gcmVxdWlyZShcImxvZGFzaC5tZXJnZVwiKVxucGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpXG5mcyA9IHJlcXVpcmUoXCJmc1wiKVxuXG5iYXNlID0gKHJvb3QsIHJlbGF0aXZlKSAtPlxuICByZWxhdGl2ZSA/PSB0cnVlXG4gIGlmIHJlbGF0aXZlIGFuZCByb290P1xuICAgIHBhdGguam9pbiBwcm9jZXNzLmN3ZCgpLCByb290XG4gIGVsc2VcbiAgICByb290IHx8IHByb2Nlc3MuY3dkKClcblxucmVhZCA9IChzb3VyY2VzLCBvcHRzKSAtPlxuICByb290ID0gYmFzZSBvcHRzLnJvb3QsIG9wdHMucmVsYXRpdmVcbiAgb2JqZWN0cyA9IFtdXG4gIGZvciBzb3VyY2UgaW4gc291cmNlc1xuICAgIGlmIHR5cGVvZiBzb3VyY2UgaXMgXCJvYmplY3RcIlxuICAgICAgb2JqZWN0cy5wdXNoIHNvdXJjZVxuICAgIGVsc2UgaWYgdHlwZW9mIHNvdXJjZSBpcyBcInN0cmluZ1wiXG4gICAgICB3aGF0ID0gcGF0aC5qb2luKHJvb3QsIHBhdGgubm9ybWFsaXplKHNvdXJjZSkpXG4gICAgICB0cnlcbiAgICAgICAgaWYgL1xcLmpzJC8udGVzdCh3aGF0KSB8fCAvXFwuanNvbiQvLnRlc3Qod2hhdClcbiAgICAgICAgICBvYmplY3RzLnB1c2ggcmVxdWlyZSh3aGF0KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgb2JqZWN0cy5wdXNoIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHdoYXQpKVxuICAgICAgY2F0Y2ggZVxuICAgICAgICBjb25zb2xlLmVycm9yIGVcbiAgb2JqZWN0c1xuXG53cml0ZSA9IChkYXRhLCBvcHRzKSAtPlxuICB3aGVyZSA9IHBhdGguam9pbihiYXNlKG9wdHMucm9vdCwgb3B0cy5yZWxhdGl2ZSksIHBhdGgubm9ybWFsaXplKG9wdHMucGF0aCkpXG4gIGZzLndyaXRlRmlsZVN5bmMgd2hlcmUsIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpICsgXCJcXG5cIiwgb3B0cy5vcHRpb25zXG4gIGRhdGFcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChzb3VyY2VzID0gW10sIG9wdHMgPSB7fSkgLT5cbiAgZGF0YSA9IHt9XG5cbiAgaWYgc291cmNlcy5sZW5ndGggPiAwXG4gICAgb2JqZWN0cyA9IHJlYWQgc291cmNlcywgb3B0c1xuICAgIGlmIG9iamVjdHMubGVuZ3RoIGlzIDFcbiAgICAgIGRhdGEgPSBvYmplY3RzWzBdXG4gICAgZWxzZVxuICAgICAgb3B0cy5tZXJnZSA/PSB0cnVlXG4gICAgICBpZiBvcHRzLm1lcmdlXG4gICAgICAgICMgbWVyZ2UgbXV0YXRlcyB0aGUgZmlyc3Qgb2JqZWN0XG4gICAgICAgIG9iamVjdHMudW5zaGlmdCB7fVxuICAgICAgICBkYXRhID0gbWVyZ2UuYXBwbHkgbnVsbCwgb2JqZWN0c1xuICAgICAgZWxzZVxuICAgICAgICBkYXRhID0gb2JqZWN0c1xuXG4gIGlmIG9wdHMud3JpdGU/LnBhdGg/XG4gICAgb3B0cy53cml0ZS5yb290ID89IG9wdHMucm9vdFxuICAgIG9wdHMud3JpdGUucmVsYXRpdmUgPz0gb3B0cy5yZWxhdGl2ZVxuICAgIHdyaXRlIGRhdGEsIG9wdHMud3JpdGVcbiAgZWxzZVxuICAgIGRhdGFcbiJdfQ==